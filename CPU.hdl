// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And16(a=instruction, b=true, out[15]=isCInst, out[0..14]=addressToWrite);
    Mux16(a=false, b[0..14]=addressToWrite, sel=isCInst, out[0..14]=cInst); // valid only when isCinst == 1
    And16(a[0..14]=cInst, b=true, out[12]=willReadM, out[6..11]=inst, out[3..5]=dest, out[0..2]=jumpCond);

    // the below sub-flags are treated seperately for readability
    And16(a[6..11]=inst,    b=true, out[11]=toZx, out[10]=toNx, out[9]=toZy, out[8]=toNy, out[7]=toF, out[6]=toNo);
    And16(a[3..5]=dest,     b=true, out[5]=writeAasInst, out[4]=writeD, out[3]=writeM);
    And16(a[0..2]=jumpCond, b=true, out[2]=jumpIfNegative, out[1]=jumpIfZero, out[0]=jumpIfPositive);

    ALU(x=dOut, y=amOut, zx=toZx, nx=toNx, zy=toZy, ny=toNy, f=toF, no=toNo, out=aluOut, zr=isZero, ng=isNegative);
    And16(a=aluOut, b=true, out=outM);
    And16(a=aluOut, b=true, out=outMtoD);
    And16(a=aluOut, b=true, out=outMtoA);

    Mux16(a[15]=false, a[0..14]=addressToWrite, b=outMtoA, sel=isCInst, out=outMuxtoA);
    Not(in=isCInst, out=isAInst);
    Or(a=writeAasInst, b=isAInst, out=writeA);
    ARegister(in=outMuxtoA, load=writeA, out=aOut);

    Mux16(a=aOut, b=inM, sel=willReadM, out=amOut);
    DRegister(in=outMtoD, load=writeD, out=dOut);
    And16(a=aOut, b=true, out[0..14]=addressM);

    Or(a=isZero, b=isNegative, out=isLEZero);
    Not(in=isLEZero, out=isPositive);

    And16(a[2]=isNegative, a[1]=isZero, a[0]=isPositive, b[2]=jumpIfNegative, b[1]=jumpIfZero, b[0]=jumpIfPositive, out[2]=willJamp2, out[1]=willJamp1, out[0]=willJamp0);
    Or8Way(in[3..7]=false, in[2]=willJamp2, in[1]=willJamp1, in[0]=willJamp0, out=willJamp);
    Not(in=willJamp, out=willInc);
    PC(in=aOut, load=willJamp, inc=willInc, reset=reset, out[0..14]=pc);
}
